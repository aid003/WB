import { Datetime, IStock, Warehouse, FbsOrder, Response, Request, Card, CardFlat, ReportDetail, FbwIncome, FbwStock, FbwOrder, FbwSale, ReportDetail2 } from './types.js';
interface WildberriesSettings {
    baseURL?: string;
    statisticsToken?: string;
}
export default class {
    #private;
    baseURL: string;
    constructor(apiKey: string, settings?: WildberriesSettings);
    /**
     * Возвращает список складов поставщика
     */
    getWarehouses(): Promise<Warehouse[]>;
    /**
     * Возвращает список сборочных заданий поставщика без пагинации.
     * @param options
     */
    getOrdersAll(options: Partial<Request.GetOrders> & Required<Pick<Request.GetOrders, 'date_start'>>): Promise<FbsOrder[]>;
    /**
     * Возвращает список сборочных заданий поставщика.
     * @param options
     */
    getOrders(options: Request.GetOrders): Promise<Response.GetOrders>;
    /**
     * Возвращает список стикеров по переданному массиву сборочных заданий.
     * Нельзя запросить больше 1000 стикеров за раз.
     */
    getOrdersStickers(orderIds: number[]): Promise<Response.GetOrdersStickers>;
    /**
     * Возвращает один стикер по переданному номеру сборочного задания.
     */
    getOrdersStickersPdf(orderId: number): Promise<Response.GetOrderStickerPdf>;
    /**
     * Обновляет статус переданных сборочных заданий.
     * @param orders
     */
    putOrders(orders: Request.PutOrders): Promise<void>;
    /**
     * Возвращает список товаров поставщика с их остатками без пагинации
     * @param options
     */
    getStocks(options: Request.GetStocks): Promise<Response.GetStocks>;
    /**
     * Возвращает список товаров поставщика с их остатками
     * @param options
     */
    getStocksAll(options?: Partial<Request.GetStocks>): Promise<IStock[]>;
    /**
     * Обновляет остатки товаров
     * @param stocks
     */
    postStocks(stocks: Request.PostStocks): Promise<void>;
    /**
     * Загрузка цен. За раз можно загрузить не более 1000 номенклатур.
     * @param prices
     * @returns
     */
    postPrices(prices: Request.PostPrices): Promise<import("axios").AxiosResponse<any>>;
    /**
     * Получение информации по номенклатурам, их ценам, скидкам и промокодам. Если не указывать фильтры, вернётся весь товар.
     * @param quantity
     * @returns
     */
    getInfo(quantity?: Request.GetInfo): Promise<Response.GetInfo>;
    /**
     * Установка скидок для номенклатур. Максимальное количество номенклатур на запрос - 1000
     * @param options
     */
    updateDiscounts(options: Request.UpdateDiscounts, activateFrom?: Datetime): Promise<string>;
    /**
     * Сброс скидок для номенклатур
     * @param options
     */
    revokeDiscounts(nmIDs: number[]): Promise<any>;
    /**
     * Установка промокодов для номенклатур. Максимальное количество номенклатур на запрос - 1000
     * @param options
     */
    updatePromocodes(options: Request.UpdatePromocodes, activateFrom?: Datetime): Promise<string>;
    /**
     * Сброс скидок для номенклатур
     * @param options
     */
    revokePromocodes(nmIDs: number[]): Promise<any>;
    /**
     * Создаёт группу новых карточек.
     * @param options
     */
    batchCreate(cards: Request.BatchCreate): Promise<any>;
    /**
     * Получение карточки поставщика по imt id
     * @param options
     */
    cardByImtID(options: Request.CardByImtID): Promise<Response.CardByImtID>;
    /**
     * Создаёт одну новую карточку.
     * @param options
     */
    cardCreate(options: Request.CardCreate): Promise<any>;
    /**
     * Удаляет одну номенклатуру из карточки товара
     * @param options
     */
    deleteNomenclature(options: Request.DeleteNomenclature): Promise<any>;
    /**
     * Позволяет выгружать файлы из хранилища. data содержит массив байт, который является файлом.
     * @param options
     */
    getCardFile(options: Request.CardFile): Promise<Response.CardFile>;
    /**
     * Позволяет сгенерировать шк для размера
     * @param options
     */
    getBarcodes(options: Request.GetBarcodes): Promise<Response.GetBarcodes>;
    /**
     * Возвращает список карточек товаров
     * @param options
     */
    getCardsAll(options?: {
        skip: number;
        take: number;
    }): Promise<Card[]>;
    makeCardsFlat(cards: Card[]): CardFlat[];
    getAddinObject(item: any): any;
    /**
     * Позволяет получить массив карточек товаров, удовлетворяющих фильтру и с указанной сортировкой.
     * order - порядок отображения карточек. Может принимать значения asc или desc.
     * sort - какие columns и с какими excludedValues исключить.
     * find - поиск карточке с определённым search(значением) в определённом columns.
     * query позволяет получать не все карточки сразу:
     * limit - сколько карточек максимум вывести,
     * offset - сколько карточек от самой первой пропустить.
     * @param options
     */
    cardList(options: Request.CardList): Promise<Response.CardList>;
    /**
     * Позволяет обновлять карточку товара. Карточка с определённым ID изменяется на ту, которую прислали.
     * @param options
     */
    cardUpdate(options: Request.CardUpdate): Promise<any>;
    /**
     * Позволяет загружать файлы в хранилище.
     * fileID заполняется из названия файла.
     * data заполняется из параметра uploadfile.
     * @param options
     */
    cardUploadFileMultipart(options: Request.CardUploadFileMultipart, xFileId?: string): Promise<any>;
    getReportDetail(dateFrom: string, dateTo: string): Promise<(ReportDetail | ReportDetail2)[]>;
    private getReportDetailChunk;
    /** Получает список поставок с сервера статистики */
    getFbwIncomes(dateFrom: string): Promise<FbwIncome[]>;
    /** Получает список остатков с сервера статистики */
    getFbwStocks(dateFrom: string): Promise<FbwStock[]>;
    /** Получает список заказов с сервера статистики */
    getFbwOrders(dateFrom: string): Promise<FbwOrder[]>;
    /** Получает список продаж с сервера статистики */
    getFbwSales(dateFrom: string): Promise<FbwSale[]>;
    /**
     * Возвращает список сборочных заданий поставщика без пагинации.
     * @param options
     */
    getFbsOrders(dateFrom: string): Promise<FbsOrder[]>;
}
export {};
