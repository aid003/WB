export declare type Datetime = string;
export declare enum OrderStatus {
    'Новый заказ' = 0,
    'Принял заказ' = 1,
    'Сборочное задание завершено' = 2,
    'Сборочное задание отклонено' = 3,
    'На доставке курьером' = 5,
    'Курьер довез и клиент принял товар' = 6,
    'Клиент не принял товар' = 7
}
export declare enum OrderUserStatus {
    'Отмена клиента' = 1,
    'Доставлен' = 2,
    'Возврат' = 3,
    'Ожидает' = 4,
    'Брак' = 5
}
/**
 * Сток
 */
export interface IStock {
    /** Категория */
    subject: string;
    /** Бренд */
    brand: string;
    /** Наименование */
    name: string;
    /** Размер */
    size: string;
    /** Баркод */
    barcode: string;
    /** Баркоды */
    barcodes: string[];
    /** Артикул поставщика */
    article: string;
    /** Остаток */
    stock: number;
    /** Склад с товаром */
    warehouseName: string;
    /** ID склада */
    warehouseId: number;
}
/**
 * Склад
 */
export interface Warehouse {
    /** ID склада */
    id: number;
    /** Название склада */
    name: string;
}
export interface OrderSticker {
    /** Идентификатор этикетки */
    wbStickerId: number;
    wbStickerIdParts: {
        /** Первая часть идентификатора этикетки (для печати подписи) */
        A: string;
        /** Вторая часть идентификатора этикетки */
        B: string;
    };
    /** Закодированное значение стикера (представляется на этикетке в формате Code-128) */
    wbStickerEncoded: string;
    /** Полное представление этикетки в векторном формате */
    wbStickerSvgBase64: string;
    /** Полное представление этикетки в формате ZPL (вертикальное положение) */
    wbStickerZplV: string;
    /** Полное представление этикетки в формате ZPL (горизонтальное положение) */
    wbStickerZpl: string;
}
/**
 * Заказ
 */
export interface FbsOrder {
    /** Идентификатор заказа */
    orderId: string;
    /** Дата создания заказа (RFC3339) */
    dateCreated: string;
    /** Идентификатор склада WB, на которой заказ должен быть доставлен */
    wbWhId: number;
    /** Идентификатор склада */
    storeId: number;
    /** Идентификатор ПВЗ/магазина, куда необходимо доставить заказ (если применимо) */
    pid: number;
    /** Адрес ПВЗ/магазина, куда необходимо доставить заказ (если применимо) */
    officeAddress: string;
    /** Адрес клиента для доставки */
    deliveryAddress: string;
    /** Адрес клиента для доставки */
    deliveryAddressDetails: {
        province: string;
        area: string;
        city: string;
        street: string;
        home: string;
        flat: string;
        entrance: string;
        longitude: number;
        latitude: number;
    };
    /** Информация о клиенте */
    userInfo: {
        /** ИД пользователя */
        userId: number;
        /** ФИО */
        fio: string;
        /** Номер телефона */
        phone: string;
    };
    /** Идентификатор артикула */
    chrtId: number;
    /** Штрихкод товара */
    barcode: string;
    /** Штрихкоды товаров */
    barcodes: string[];
    /** 0    - Новый заказ 1    - Принял заказ 2    - Сборочное задание завершено 3    - Сборочное задание отклонено 5 - На доставке курьером 6 - Курьер довез и клиент принял товар 7 - Клиент не принял товар */
    status: OrderUserStatus;
    /** 1 - Отмена клиента 2 - Доставлен 3 - Возврат 4 - Ожидает 5 - Брак */
    userStatus: OrderUserStatus;
    /** Уникальный идентификатор вещи, разный у одинаковых chrt_id */
    rid: string;
    /** Стоимость товара с учетом скидок в копейках! */
    totalPrice: number;
    /** Идентификатор транзакции (для группировки заказов) */
    orderUID: string;
    /** Этикетка */
    sticker?: OrderSticker;
    scOfficesNames: string[];
    deliveryType: number;
    /** Курс валюты */
    currencyCode: number;
}
export interface Parameter {
    count?: number;
    units?: string;
    value?: string;
}
export interface Addin {
    params?: Parameter[] | null;
    type?: string;
}
/**
 * Карточка
 */
export interface Variation {
    /**
     * Характеристики конкретной вариации номенклатуры
     */
    addin?: Addin[] | null;
    barcode?: string;
    /**
     * Штрихкоды
     */
    barcodes?: string[] | null;
    /**
     * Не используется поставщиком
     */
    chrtId?: number;
    /**
     * Ошибки от старой спеки
     */
    errors?: string[] | null;
    /**
     * Идентификатор. Генерируется автоматически
     */
    id?: string;
}
export interface Nomenclature {
    /**
     * Характеристики конкретной номенклатуры товара
     */
    addin?: Addin[] | null;
    concatVendorCode?: string;
    /**
     * Идентификатор цвета товара. Генерируется при создании карточки
     */
    id?: string;
    isArchive?: boolean;
    /**
     * Не используется поставщиком
     */
    nmId?: number;
    /**
     * Структура с характеристиками различных размеров номенклатуры
     */
    variations?: Variation[] | null;
    /**
     * Артикул товара
     */
    vendorCode?: string;
}
export interface Card {
    /** Общие характеристики товара */
    addin?: Addin[] | null;
    /** Страна-изготовитель товара */
    countryProduction?: string;
    /** Дата создания карточки. Заполняется автоматически */
    createdAt?: string;
    /** Идентификатор карточки. Генерируется при создании карточки */
    id?: string;
    /** Не используется поставщиком */
    imtId?: number;
    /** Не используется поставщиком */
    imtSupplierId?: number;
    /** Структура с характеристиками номенклатур товара */
    nomenclatures?: Nomenclature[] | null;
    /** Продукт. К какой категории принадлежит товар (джинсы, книги и прочее) */
    object?: string;
    /** Родительская категория */
    parent?: string;
    /**
     * Идентификатор поставщика. Подставляется автоматически
     */
    supplierID?: string;
    supplierVendorCode?: string;
    /** Дата последнего обновления карточки. Заполняется автоматически */
    updatedAt?: string;
    /** Айди массовой загрузки, в процессе которой была создана карточка. Если айди пуст, то карточка была создана другим способом */
    uploadID?: string;
    /** Идентификатор пользователя, создавшего карточку. Подставляется автоматически */
    userId?: number;
}
export interface CardFlat extends Card {
    _nomenclature: NomenclatureFlat;
    _addin: AddinFlat;
}
export interface NomenclatureFlat extends Nomenclature {
    _variation: VariationFlat;
    _addin: AddinFlat;
}
export interface VariationFlat extends Variation {
    _addin: AddinFlat;
}
export interface AddinFlat {
    [key: string]: any[];
}
export interface Filter {
    column?: string;
    excludedValues?: {
        [key: string]: any;
    } | null;
}
export interface Find {
    column?: string;
    search?: {
        [key: string]: any;
    } | null;
}
export declare type OrderSort = {
    column: string;
    order: 'asc' | 'desc';
};
export interface Sort {
    filter?: Filter[] | null;
    find?: Find[] | null;
    order?: OrderSort;
}
export interface Cursor {
    limit?: number;
    offset?: number;
    total?: number;
}
export declare namespace Response {
    type GetOrders = {
        total: number;
        orders: FbsOrder[];
    };
    type GetOrdersStickers = {
        data: {
            orderId: number;
            sticker: OrderSticker;
        }[];
    };
    type GetOrderStickerPdf = {
        data: {
            file: string;
            name: string;
            mimeType: string;
        };
    };
    type GetStocks = {
        total: number;
        stocks: IStock[] | null;
    };
    type PostStocks = {
        error: boolean;
        errorText: string;
        additionalErrors: [{}];
        data: {
            errors: [
                {
                    barcode: string;
                    err: string;
                }
            ];
        };
    };
    type PutOrders = {
        error: boolean;
        errorText: string;
        data: {};
        additionalErrors: {};
    };
    type GetInfo = {
        nmId: number;
        price: number;
        discount: number;
        promoCode: number;
    }[];
    /**
     * Получение карточки поставщика по imt id
     */
    type CardByImtID = {
        id: number | string;
        jsonrpc: string;
        params: {
            card?: Card;
        };
    };
    /**
     * Позволяет выгружать файлы из хранилища. **data** содержит массив байт, который является файлом.
     */
    type CardFile = {
        data?: string;
    };
    /**
     * Позволяет сгенерировать шк для размера
     */
    type GetBarcodes = {
        barcodes?: string[] | null;
    };
    type CardList = {
        id: number;
        jsonrpc: string;
        result: {
            cards?: Card[] | null;
            cursor?: Cursor;
        };
    };
}
export declare namespace Request {
    type GetOrders = {
        date_start: Datetime;
        date_end?: Datetime;
        take: number;
        skip: number;
        id?: number;
    };
    type GetStocks = {
        search?: string;
        sort?: 'subject' | 'brand' | 'name' | 'size' | 'barcode' | 'article';
        order?: 'asc' | 'desc';
        skip: number;
        take: number;
    };
    type PostStocks = {
        barcode: string;
        stock: number;
        warehouseId: number;
    }[];
    type PutOrders = {
        orderId: string;
        status: OrderStatus;
    }[];
    type PostPrices = {
        nmId: number;
        price: number;
    }[];
    type UpdateDiscounts = {
        discount: number;
        nm: number;
    }[];
    type UpdatePromocodes = {
        discount: number;
        nm: number;
    }[];
    enum GetInfo {
        'Товар с любым остатком' = 0,
        'Товар с ненулевым остатком' = 1,
        'Товар с нулевым остатком' = 2
    }
    type BatchCreate = {
        id: number | string;
        jsonrpc: string;
        params: {
            card?: Card[] | null;
            supplierID?: string;
        };
    };
    type CardByImtID = {
        id: string;
        jsonrpc: string;
        params: {
            imtID: number;
            supplierID: string;
        };
    };
    type CardCreate = {
        id: string | number;
        jsonrpc: string;
        params: {
            card?: Card;
            supplierID?: string;
        };
    };
    type DeleteNomenclature = {
        id: number;
        jsonrpc: string;
        params: {
            nomenclatureID?: number;
            supplierID?: string;
        };
    };
    type CardFile = {
        supplierID: string;
        fileID: string;
    };
    /**
     * Позволяет сгенерировать шк для размера
     */
    type GetBarcodes = {
        id: number;
        jsonrpc: string;
        params: {
            quantity?: number;
            supplierID?: string;
        };
    };
    /**
     * Позволяет получить массив карточек товаров, удовлетворяющих фильтру и с указанной сортировкой. **order** - порядок отображения карточек.Может принимать значения **asc** или **desc**.**sort** - какие **columns** и с какими **excludedValues** исключить.**find** - поиск карточке с определённым **search**(значением) в определённом **columns**.**query** позволяет получать не все карточки сразу: **limit** - сколько карточек максимум вывести, **offset** - сколько карточек от самой первой пропустить.
     */
    type CardList = {
        id: number | string;
        jsonrpc: string;
        params: {
            filter?: Sort;
            isArchive?: boolean;
            query?: Cursor;
            supplierID?: string;
            withError?: boolean;
        };
    };
    /**
     * Позволяет обновлять карточку товара.Карточка с определённым ID изменяется на ту, которую прислали.
     */
    type CardUpdate = {
        id: number | string;
        jsonrpc: string;
        params: {
            card?: Card;
            supplierID?: string;
        };
    };
    /**
     * Позволяет загружать файлы в хранилище. **fileID** заполняется из названия файла. **data** заполняется из параметра **uploadfile**.
     */
    type CardUploadFileMultipart = {
        data?: unknown;
    };
}
export interface ReportDetail {
    /** Номер отчета */
    realizationreport_id: number;
    /** Договор */
    suppliercontract_code: string;
    /** Дата отчета */
    rr_dt: string;
    /** Номер строки */
    rrd_id: number;
    /** Номер поставки */
    gi_id: number;
    /** Предмет */
    subject_name: string;
    /** Артикул */
    nm_id: number;
    /** Бренд */
    brand_name: string;
    /** Артикул поставщика */
    sa_name: string;
    /** Размер */
    ts_name: string;
    /** Штрихкод */
    barcode: string;
    /** Тип документа */
    doc_type_name: string;
    /** Количество */
    quantity: number;
    /** Ставка НДС */
    nds: number;
    /** Себестоимость сумма */
    cost_amount: number;
    /** Цена розничная */
    retail_price: number;
    /** Сумма продаж (Возвратов) */
    retail_amount: number;
    /** Сумма комиссии продаж */
    retail_commission: number;
    /** Согласованная скидка */
    sale_percent: number;
    /** Процент комиссии */
    commission_percent: number;
    /** Вознаграждение покупателю */
    customer_reward: number;
    /** Вознаграждение поставщику */
    supplier_reward: number;
    /** Склад */
    office_name: string;
    /** Обоснование для оплаты */
    supplier_oper_name: string;
    /** Дата заказа */
    order_dt: string;
    /** Дата продажи */
    sale_dt: string;
    /** ШК */
    shk_id: number;
    /** Цена розничная с учетом согласованной скидки */
    retail_price_withdisc_rub: number;
    /** К перечислению поставщику */
    for_pay: number;
    /** К перечислению поставщику НДС */
    for_pay_nds: number;
    /** Количество доставок */
    delivery_amount: number;
    /** Количество возвратов */
    return_amount: number;
    /** Стоимость логистики */
    delivery_rub: number;
    /** Тип коробов */
    gi_box_type_name: string;
    /** Согласованный продуктовый дисконт */
    product_discount_for_report: number;
    /** Промокод */
    supplier_promo: number;
    /** Скидка постоянного покупателя */
    supplier_spp: number;
    /** Уникальный идентификатор вещи */
    rid: number;
}
export interface ReportDetail2 {
    /** Номер отчета */
    realizationreport_id: number;
    /** Договор */
    suppliercontract_code: string;
    /** Дата отчета */
    rr_dt: string;
    /** Номер строки */
    rrd_id: number;
    /** Номер поставки */
    gi_id: number;
    /** Предмет */
    subject_name: string;
    /** Артикул */
    nm_id: number;
    /** Бренд */
    brand_name: string;
    /** Артикул поставщика */
    sa_name: string;
    /** Размер */
    ts_name: string;
    /** Штрихкод */
    barcode: string;
    /** Тип документа */
    doc_type_name: string;
    /** Количество */
    quantity: number;
    /** Цена розничная */
    retail_price: number;
    /** Сумма продаж (Возвратов) */
    retail_amount: number;
    /** Согласованная скидка */
    sale_percent: number;
    /** Процент комиссии */
    commission_percent: number;
    /** Склад */
    office_name: string;
    /** Обоснование для оплаты */
    supplier_oper_name: string;
    /** Дата заказа */
    order_dt: string;
    /** Дата продажи */
    sale_dt: string;
    /** ШК */
    shk_id: number;
    /** Цена розничная с учетом согласованной скидки */
    retail_price_withdisc_rub: number;
    /** Количество доставок */
    delivery_amount: number;
    /** Количество возвратов */
    return_amount: number;
    /** Стоимость логистики */
    delivery_rub: number;
    /** Тип коробов */
    gi_box_type_name: string;
    /** Согласованный продуктовый дисконт */
    product_discount_for_report: number;
    /** Промокод */
    supplier_promo: number;
    /** Уникальный идентификатор вещи */
    rid: number;
    /** Размер кВВ без НДС, % Базовый */
    ppvz_kvw_prc_base: number;
    /** Итоговый кВВ без НДС, % */
    ppvz_kvw_prc: number;
    /** Номер офиса */
    ppvz_office_id: number;
    /** Возмещение Расходов услуг поверенного */
    ppvz_reward: number;
    /** Вознаграждение с продаж до вычета услуг поверенного, без НДС */
    ppvz_sales_commission: number;
    /** Скидка постоянного Покупателя (СПП) */
    ppvz_spp_prc: number;
    /** НДС с Вознаграждения Вайлдберриз */
    ppvz_vw_nds: number;
    /** Вознаграждение Вайлдберриз (ВВ), без НДС */
    ppvz_vw: number;
    /** К перечислению Продавцу за реализованный Товар */
    ppvz_for_pay: number;
    /** Номер партнера */
    ppvz_supplier_id: number;
    /** Наименование офиса доставки */
    ppvz_office_name: string;
    /** Партнер */
    ppvz_supplier_name: string;
    /** ИНН партнера */
    ppvz_inn: string;
}
export interface FbwIncome {
    /** номер поставки */
    incomeId: number;
    /** номер УПД */
    number: string;
    /** дата поступления */
    date: Datetime;
    /** дата и время обновления информации в сервисе */
    lastChangeDate: Datetime;
    /** ваш артикул */
    supplierArticle: string;
    /** размер */
    techSize: string;
    /** штрих-код */
    barcode: string;
    /** кол-во */
    quantity: number;
    /** цена из УПД */
    totalPrice: number;
    /** дата принятия (закрытия) у нас */
    dateClose: Datetime;
    /** название склада */
    warehouseName: string;
    /** Код WB */
    nmId: number;
    /** Текущий статус поставки */
    status: string;
}
export interface FbwStock {
    /** дата и время обновления информации в сервисе */
    lastChangeDate: Date;
    /** ваш артикул */
    supplierArticle: string;
    /** размер */
    techSize: string;
    /** штрих-код */
    barcode: string;
    /** кол-во, доступное для продажи */
    quantity: number;
    /** договор поставки */
    isSupply: boolean;
    /** договор реализации */
    isRealization: boolean;
    /** кол-во полное */
    quantityFull: number;
    /** кол0во не в заказе */
    quantityNotInOrders: number;
    /** название склада */
    warehouseName: string;
    /** в пути к клиенту (штук) */
    inWayToClient: number;
    /** в пути от клиента (штук) */
    inWayFromClient: number;
    /** код WB */
    nmId: number;
    /** предмет */
    subject: string;
    /** категория */
    category: string;
    /** кол-во дней на сайте */
    daysOnSite: number;
    /** бренд */
    brand: string;
    /** код контракта */
    SCCode: string;
    /**  */
    Price: number;
    /**  */
    Discount: number;
}
export interface FbwOrder {
    /** номер заказа */
    number: number;
    /** дата заказа */
    date: Datetime;
    /** дата время обновления информации в сервисе */
    lastChangeDate: Datetime;
    /** ваш артикул */
    supplierArticle: string;
    /** размер */
    techSize: string;
    /** штрих-код */
    barcode: string;
    /** кол-во */
    quantity: number;
    /** цена до согласованной скидки/промо/спп */
    totalPrice: number;
    /** согласованный итоговый дисконт. */
    discountPercent: number;
    /** склад отгрузки */
    warehouseName: string;
    /** область */
    oblast: string;
    /** номер поставки */
    incomeID: number;
    /** уникальный идентификатор позиции заказа */
    odid: number;
    /** Код WB */
    nmId: number;
    /** предмет */
    subject: string;
    /** бренд */
    category: string;
    /** категория */
    brand: string;
    /** признак отмены заказа (0 – отмены не было, 1 – отмена была */
    isCancel: boolean;
    /** дата отмены заказа */
    cancel_dt: Datetime;
    /**  */
    gNumber: string;
}
export interface FbwSale {
    /** номер документа */
    number: string;
    /** дата продажи */
    date: Datetime;
    /** дата время обновления информации в сервисе */
    lastChangeDate: Datetime;
    /** ваш артикул */
    supplierArticle: string;
    /** размер */
    techSize: string;
    /** штрих-код */
    barcode: string;
    /** кол-во */
    quantity: number;
    /** начальная розничная цена товара */
    totalPrice: number;
    /** согласованная скидка на товар */
    discountPercent: number;
    /** договор поставки */
    isSupply: boolean;
    /** договор реализации */
    isRealization: boolean;
    /** номер исходного заказа ("Номер заказа" из сервиса "Заказы") */
    orderId: number;
    /** согласованный промокод */
    promoCodeDiscount: number;
    /** склад отгрузки */
    warehouseName: string;
    /** страна */
    countryName: string;
    /** округ */
    oblastOkrugName: string;
    /** регион */
    regionName: string;
    /** номер поставки */
    incomeID: number;
    /** уникальный идентификатор продажи/возврата (SXXXXXXXXXX — продажа, RXXXXXXXXXX — возврат, DXXXXXXXXXXX — доплата)*/
    saleID: string;
    /** уникальный идентификатор позиции заказа */
    odid: number;
    /** согласованная скидка постоянного покупателя (СПП) */
    spp: number;
    /** к перечислению поставщику */
    forPay: number;
    /** фактическая цена из заказа (с учетом всех скидок, включая и от ВБ) */
    finishedPrice: number;
    /** цена, от которой считается вознаграждение поставщика forpay (с учетом всех согласованных скидок)*/
    priceWithDisc: number;
    /** код WB */
    nmId: number;
    /** предмет */
    subject: string;
    /** категория */
    category: string;
    /** бренд */
    brand: string;
    /** 1-продажа сторнирована, 0 – не сторнирована */
    IsStorno: number;
    /** gNumber */
    gNumber: string;
}
